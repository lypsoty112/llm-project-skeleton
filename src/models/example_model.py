from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, field_validator

"""
This file contains the Pydantic models for the example chain.
"""


class Message(BaseModel):
    content: str = Field(description="The message that has been sent.", max_length=10000)
    role: str = Field(description="The role of the sender of the message.")
    timestamp: datetime = Field(description="The timestamp of the message.", default_factory=datetime.now)

    # noinspection PyMethodParameters
    @field_validator('content')
    def validate_message(cls, value):
        if not value.strip():  # Checks if the string is empty or contains only whitespace
            raise ValueError("Message cannot be empty or contain only whitespace")

        if len(value) > 10000:
            return value[:10000].strip()
        return value.strip()


class ExampleChainInput(BaseModel):
    messages: list[Message] = Field(description="The messages to be sent to the chain.", min_items=1)
    metadata: Optional[dict] = Field(description="The metadata to be sent to the chain.", default={})


class ExampleChainOutput(BaseModel):
    response: str = Field(description="The response generated by the chain.")
    metadata: dict = Field(description="The metadata from the chain.", default={})
